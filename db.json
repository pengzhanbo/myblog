{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/apollo/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/apollo/source/css/apollo.css","path":"css/apollo.css","modified":1,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","path":"font/sourcesanspro.woff2","modified":0,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff","path":"font/sourcesanspro.woff","modified":0,"renderable":1},{"_id":"themes/apollo/source/scss/apollo.scss","path":"scss/apollo.scss","modified":0,"renderable":1},{"_id":"themes/apollo/source/helloboy.gif","path":"helloboy.gif","modified":0,"renderable":1}],"Cache":[{"_id":"themes/apollo/.gitignore","hash":"a006beea0877a0aa3610ee00e73f62cb1d45125b","modified":1492142365000},{"_id":"themes/apollo/README.md","hash":"201c76d030a98578ed5a6ad5c766a7bde91c32d3","modified":1492142365000},{"_id":"themes/apollo/_config.yml","hash":"1102945b22bc80ec26513158e792df1d75ce0cad","modified":1495208613560},{"_id":"themes/apollo/LICENSE","hash":"6e31ac9076bfc8f09ae47977419eee4edfb63e5b","modified":1492142365000},{"_id":"themes/apollo/gulpfile.js","hash":"857a026b6643a2cd52c65d4ae0dc7fe9618206ee","modified":1492142365000},{"_id":"themes/apollo/package.json","hash":"eb1e76ec0b7ed6c6c7b2bd32b4f1e1bbe15800ca","modified":1492142365000},{"_id":"source/_posts/es6-learn-1.md","hash":"e98b92d06ce545480d81add17101cf021fdb8d93","modified":1495128093486},{"_id":"source/_posts/es6-learn-2.md","hash":"2a85edd4f13d38c777ebf58e4bed6e1046f034d8","modified":1457518242091},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1495123463683},{"_id":"themes/apollo/doc/doc-en.md","hash":"d6d9756b2085cdd8ee51eb5594427e2abf170e94","modified":1492142365000},{"_id":"themes/apollo/doc/doc-zh.md","hash":"d43c1f6bff66426744a2c6f031d19ff09cdeb2d1","modified":1492142365000},{"_id":"themes/apollo/languages/en.yml","hash":"40292f2a48e4e6361132033a47c516cb33127b6c","modified":1492142365000},{"_id":"themes/apollo/languages/zh-cn.yml","hash":"9e4b03e14c094000257ea254fd660dde4c7af63c","modified":1492142365000},{"_id":"themes/apollo/layout/archive.jade","hash":"62797414355bf4474092bc3a32726c8340820ffb","modified":1492142365000},{"_id":"themes/apollo/layout/index.jade","hash":"55f2f1b4b5364a0e09cb18e1112664c6415fb881","modified":1492142365000},{"_id":"themes/apollo/layout/post.jade","hash":"245c26244c075c3632d1545c3b228ee9d112f15d","modified":1492142365000},{"_id":"themes/apollo/source/favicon.png","hash":"a9cdcb22d1e74d5480323e19d1983de5a6873b8c","modified":1492142365000},{"_id":"themes/apollo/source/helloboy.gif","hash":"a2c898c7fb32248923bde9820ec5fe45bdcffdcc","modified":1495206014216},{"_id":"themes/apollo/layout/mixins/paginator.jade","hash":"f4ee2fb61a32e199b48cf93771749edc8a007391","modified":1492142365000},{"_id":"themes/apollo/layout/mixins/post.jade","hash":"cd9447e9b0ad22213e6a17d9a9b948f9f998f921","modified":1492142365000},{"_id":"themes/apollo/layout/partial/copyright.jade","hash":"217f8b17054e5079f2d30bb7e2e4e36c0f2161b7","modified":1492142365000},{"_id":"themes/apollo/layout/partial/comment.jade","hash":"45036fdda53eaf933c5bbf334f80e091e557dccd","modified":1495209090200},{"_id":"themes/apollo/layout/partial/head.jade","hash":"43d2db73f0247a9a3ed00ecb95b537a872b7201a","modified":1492142365000},{"_id":"themes/apollo/layout/partial/layout.jade","hash":"529c2ec06cfbc3d5b6d66dd320db50dfab5577a6","modified":1492142365000},{"_id":"themes/apollo/layout/partial/nav.jade","hash":"f4842d9d3d763fbb823d112a6f49f24cc42a0ad4","modified":1492142365000},{"_id":"themes/apollo/layout/partial/scripts.jade","hash":"6bff591ae3d1ff6750f239c4c933ad61f009f36a","modified":1492142365000},{"_id":"themes/apollo/source/css/apollo.css","hash":"4937190f2fabf03390cf3b2fc57054eca42a84bb","modified":1495209340333},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1492142365000},{"_id":"themes/apollo/source/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1492142365000},{"_id":"themes/apollo/source/scss/apollo.scss","hash":"e0092f469264b55b25e0d441274f1c812147e7d1","modified":1492142365000},{"_id":"themes/apollo/source/scss/_partial/archive-post-list.scss","hash":"d2f740a7d48349b7536777c795f82ab740836d0f","modified":1492142365000},{"_id":"themes/apollo/source/scss/_partial/base.scss","hash":"ae967b2049ecb9b8c4e139ecce32fd9fb5358ac5","modified":1492142365000},{"_id":"themes/apollo/source/scss/_partial/copyright.scss","hash":"1309667e3000037170cfbb5b8c9c65f4ffcf6814","modified":1492142365000},{"_id":"themes/apollo/source/scss/_partial/footer.scss","hash":"094aca6e52f11b139ac7980ca03fa7b9d8fc7b2f","modified":1492142365000},{"_id":"themes/apollo/source/scss/_partial/header.scss","hash":"83b89d0fdd7a34b98c13a993211308568a4d09eb","modified":1495209329102},{"_id":"themes/apollo/source/scss/_partial/mq.scss","hash":"fc5dda52cfbb10e27e2471e03f4606fb3d588225","modified":1492142365000},{"_id":"themes/apollo/source/scss/_partial/home-post-list.scss","hash":"6b5c59f3d2295944f934aee2c1156012a3306d5d","modified":1492142365000},{"_id":"themes/apollo/source/scss/_partial/normalize.scss","hash":"fd0b27bed6f103ea95b08f698ea663ff576dbcf1","modified":1492142365000},{"_id":"themes/apollo/source/scss/_partial/post.scss","hash":"1998f207541a2590a5624549f96c5e65d136690a","modified":1492142365000}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"es6学习笔记（一）","date":"2016-03-09T08:25:21.000Z","_content":"学习es6也有一段时间，但一直没有去整理成相应的笔记做总结记录，这两天刚好用 `hexo` 搭建了一个个人博客，那么就开始做整理笔记吧！\n<!-- more -->\n***\n### 1. let  命令\n##### 基本用法\n  ES6新增 `let` 命令，用以声明变量。用法类似于 `var` ，但所声明的变量，仅在 `let` 所在的代码块内有效。\n``` javascript\n{\n   let a = 1;\n   var b = 2;\n}\nconsole.log(a);   //ReferenceError: a is not defined.\nconsole.log(b);  // 2\n```\n##### 不存在变量提升\n```\nconsole.log(a);  // undefined\nconsole.log(b); //  ReferenceError\nvar a = 1;\nlet b = 2; \n```\n上面代码中，变量 `a` 用 `var` 声明，会发生变量提升，即在脚本开始运行时，变量 `a`就已经存在了，但是没有值，所以输出`undefined` 。 变量 `b` 用 `let` 声明，不存在变量提升，这表明在变量声明之前，变量 `b` 是不存在的，如果这时调用到变量`b`，则会抛出错误。\n\n##### 暂时性死区\n只要块级作用域内存在 `let` 命令，它所声明的变量就“绑定”这个区域，不再受外部的影响。\n```  javascript\nvar a = 1;\nif(true){\n  a = 2;  // ReferenceError\n  let a;\n}\n```\n上面代码中，存在全局变量 `a` ，但是块级作用域内 `let` 又声明了一个局部变量 `a` ，导致后者绑定这个块级作用域，所以在 `let` 声明变量前，对 `a` 赋值会报错。\nES6明确规定，如果区域中存在 `let` 和 `const` 命令，这个区域对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。\n在代码块内，使用   `let` 命令声明变量之前，该变量都是不可用的。在语法上，称为“暂时性死区（temporal dead zone，简称TDZ）”。\n***\n\nES6规定暂时性死区和不存在变量提升，主要是为了减少运行时错误，防止在变量声明前就使用这个变量，从而导致意料之外的行为。这样的错误在ES5中很常见，现在有了这种规定，避免此类错误就很容易了。\n\n****\n\n#### 不允许重复声明\n`let` 不允许在同一作用域内，重复声明同一个变量\n``` javascript\n//报错\nfunction fn(){\n  let a = 0;\n  var a = 1;\n}\n\n//报错\nfunction fn(){\n  let a = 1;\n  let a = 2;\n}\n``` \n因此，不能在函数内部重新声明参数\n``` javascript\n//报错\nfunction fn(arg){\n  let arg;\n}\n//不会报错\nfunction fn(arg){\n  {\n    let arg;\n  }\n}\n```\n\n### 2. const 命令\n`const` 声明的是常量，一旦声明，常量的值就不可改变\n``` javascript\nconst PI = 3.14;\nconsole.log(PI);  // 3.14\n\nPI=3;  //赋值无效，常规模式下不会报错\n```\n`const` 声明的变量不得改变值，这意味着，一旦声明变量，就需要立刻给变量赋值\n``` javascript\n'use strict'\nconst a;   // SyntaxError: missing = in const declaration\n```\n`const` 声明的变量，在严格模式下，会报错，在常规模式下虽然不会报错，但之后也无法重新赋值。\n****\n*****\n\n### 3. 块级作用域\n\n ******\n****","source":"_posts/es6-learn-1.md","raw":"---\ntitle: es6学习笔记（一）\ntags: ['笔记','es6']\ndate: 2016-03-09 16:25:21\n---\n学习es6也有一段时间，但一直没有去整理成相应的笔记做总结记录，这两天刚好用 `hexo` 搭建了一个个人博客，那么就开始做整理笔记吧！\n<!-- more -->\n***\n### 1. let  命令\n##### 基本用法\n  ES6新增 `let` 命令，用以声明变量。用法类似于 `var` ，但所声明的变量，仅在 `let` 所在的代码块内有效。\n``` javascript\n{\n   let a = 1;\n   var b = 2;\n}\nconsole.log(a);   //ReferenceError: a is not defined.\nconsole.log(b);  // 2\n```\n##### 不存在变量提升\n```\nconsole.log(a);  // undefined\nconsole.log(b); //  ReferenceError\nvar a = 1;\nlet b = 2; \n```\n上面代码中，变量 `a` 用 `var` 声明，会发生变量提升，即在脚本开始运行时，变量 `a`就已经存在了，但是没有值，所以输出`undefined` 。 变量 `b` 用 `let` 声明，不存在变量提升，这表明在变量声明之前，变量 `b` 是不存在的，如果这时调用到变量`b`，则会抛出错误。\n\n##### 暂时性死区\n只要块级作用域内存在 `let` 命令，它所声明的变量就“绑定”这个区域，不再受外部的影响。\n```  javascript\nvar a = 1;\nif(true){\n  a = 2;  // ReferenceError\n  let a;\n}\n```\n上面代码中，存在全局变量 `a` ，但是块级作用域内 `let` 又声明了一个局部变量 `a` ，导致后者绑定这个块级作用域，所以在 `let` 声明变量前，对 `a` 赋值会报错。\nES6明确规定，如果区域中存在 `let` 和 `const` 命令，这个区域对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。\n在代码块内，使用   `let` 命令声明变量之前，该变量都是不可用的。在语法上，称为“暂时性死区（temporal dead zone，简称TDZ）”。\n***\n\nES6规定暂时性死区和不存在变量提升，主要是为了减少运行时错误，防止在变量声明前就使用这个变量，从而导致意料之外的行为。这样的错误在ES5中很常见，现在有了这种规定，避免此类错误就很容易了。\n\n****\n\n#### 不允许重复声明\n`let` 不允许在同一作用域内，重复声明同一个变量\n``` javascript\n//报错\nfunction fn(){\n  let a = 0;\n  var a = 1;\n}\n\n//报错\nfunction fn(){\n  let a = 1;\n  let a = 2;\n}\n``` \n因此，不能在函数内部重新声明参数\n``` javascript\n//报错\nfunction fn(arg){\n  let arg;\n}\n//不会报错\nfunction fn(arg){\n  {\n    let arg;\n  }\n}\n```\n\n### 2. const 命令\n`const` 声明的是常量，一旦声明，常量的值就不可改变\n``` javascript\nconst PI = 3.14;\nconsole.log(PI);  // 3.14\n\nPI=3;  //赋值无效，常规模式下不会报错\n```\n`const` 声明的变量不得改变值，这意味着，一旦声明变量，就需要立刻给变量赋值\n``` javascript\n'use strict'\nconst a;   // SyntaxError: missing = in const declaration\n```\n`const` 声明的变量，在严格模式下，会报错，在常规模式下虽然不会报错，但之后也无法重新赋值。\n****\n*****\n\n### 3. 块级作用域\n\n ******\n****","slug":"es6-learn-1","published":1,"updated":"2017-05-18T17:21:33.486Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2vzfny40000hkte5mhhbrlw","content":"<p>学习es6也有一段时间，但一直没有去整理成相应的笔记做总结记录，这两天刚好用 <code>hexo</code> 搭建了一个个人博客，那么就开始做整理笔记吧！<br><a id=\"more\"></a></p>\n<hr>\n<h3 id=\"1-let-命令\"><a href=\"#1-let-命令\" class=\"headerlink\" title=\"1. let  命令\"></a>1. let  命令</h3><h5 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h5><p>  ES6新增 <code>let</code> 命令，用以声明变量。用法类似于 <code>var</code> ，但所声明的变量，仅在 <code>let</code> 所在的代码块内有效。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</div><div class=\"line\">   <span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a);   <span class=\"comment\">//ReferenceError: a is not defined.</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b);  <span class=\"comment\">// 2</span></div></pre></td></tr></table></figure></p>\n<h5 id=\"不存在变量提升\"><a href=\"#不存在变量提升\" class=\"headerlink\" title=\"不存在变量提升\"></a>不存在变量提升</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.log(a);  // undefined</div><div class=\"line\">console.log(b); //  ReferenceError</div><div class=\"line\">var a = 1;</div><div class=\"line\">let b = 2;</div></pre></td></tr></table></figure>\n<p>上面代码中，变量 <code>a</code> 用 <code>var</code> 声明，会发生变量提升，即在脚本开始运行时，变量 <code>a</code>就已经存在了，但是没有值，所以输出<code>undefined</code> 。 变量 <code>b</code> 用 <code>let</code> 声明，不存在变量提升，这表明在变量声明之前，变量 <code>b</code> 是不存在的，如果这时调用到变量<code>b</code>，则会抛出错误。</p>\n<h5 id=\"暂时性死区\"><a href=\"#暂时性死区\" class=\"headerlink\" title=\"暂时性死区\"></a>暂时性死区</h5><p>只要块级作用域内存在 <code>let</code> 命令，它所声明的变量就“绑定”这个区域，不再受外部的影响。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</div><div class=\"line\">  a = <span class=\"number\">2</span>;  <span class=\"comment\">// ReferenceError</span></div><div class=\"line\">  <span class=\"keyword\">let</span> a;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面代码中，存在全局变量 <code>a</code> ，但是块级作用域内 <code>let</code> 又声明了一个局部变量 <code>a</code> ，导致后者绑定这个块级作用域，所以在 <code>let</code> 声明变量前，对 <code>a</code> 赋值会报错。<br>ES6明确规定，如果区域中存在 <code>let</code> 和 <code>const</code> 命令，这个区域对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。<br>在代码块内，使用   <code>let</code> 命令声明变量之前，该变量都是不可用的。在语法上，称为“暂时性死区（temporal dead zone，简称TDZ）”。</p>\n<hr>\n<p>ES6规定暂时性死区和不存在变量提升，主要是为了减少运行时错误，防止在变量声明前就使用这个变量，从而导致意料之外的行为。这样的错误在ES5中很常见，现在有了这种规定，避免此类错误就很容易了。</p>\n<hr>\n<h4 id=\"不允许重复声明\"><a href=\"#不允许重复声明\" class=\"headerlink\" title=\"不允许重复声明\"></a>不允许重复声明</h4><p><code>let</code> 不允许在同一作用域内，重复声明同一个变量<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//报错</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//报错</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">2</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></div><div class=\"line\">因此，不能在函数内部重新声明参数</div><div class=\"line\">`<span class=\"string\">``</span> javascript</div><div class=\"line\"><span class=\"comment\">//报错</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">arg</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> arg;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//不会报错</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">arg</span>)</span>&#123;</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> arg;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-const-命令\"><a href=\"#2-const-命令\" class=\"headerlink\" title=\"2. const 命令\"></a>2. const 命令</h3><p><code>const</code> 声明的是常量，一旦声明，常量的值就不可改变<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> PI = <span class=\"number\">3.14</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(PI);  <span class=\"comment\">// 3.14</span></div><div class=\"line\"></div><div class=\"line\">PI=<span class=\"number\">3</span>;  <span class=\"comment\">//赋值无效，常规模式下不会报错</span></div></pre></td></tr></table></figure></p>\n<p><code>const</code> 声明的变量不得改变值，这意味着，一旦声明变量，就需要立刻给变量赋值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span></div><div class=\"line\"><span class=\"keyword\">const</span> a;   <span class=\"comment\">// SyntaxError: missing = in const declaration</span></div></pre></td></tr></table></figure></p>\n<p><code>const</code> 声明的变量，在严格模式下，会报错，在常规模式下虽然不会报错，但之后也无法重新赋值。</p>\n<hr>\n<hr>\n<h3 id=\"3-块级作用域\"><a href=\"#3-块级作用域\" class=\"headerlink\" title=\"3. 块级作用域\"></a>3. 块级作用域</h3><hr>\n<hr>\n","site":{"data":{}},"excerpt":"<p>学习es6也有一段时间，但一直没有去整理成相应的笔记做总结记录，这两天刚好用 <code>hexo</code> 搭建了一个个人博客，那么就开始做整理笔记吧！<br>","more":"</p>\n<hr>\n<h3 id=\"1-let-命令\"><a href=\"#1-let-命令\" class=\"headerlink\" title=\"1. let  命令\"></a>1. let  命令</h3><h5 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h5><p>  ES6新增 <code>let</code> 命令，用以声明变量。用法类似于 <code>var</code> ，但所声明的变量，仅在 <code>let</code> 所在的代码块内有效。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</div><div class=\"line\">   <span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a);   <span class=\"comment\">//ReferenceError: a is not defined.</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b);  <span class=\"comment\">// 2</span></div></pre></td></tr></table></figure></p>\n<h5 id=\"不存在变量提升\"><a href=\"#不存在变量提升\" class=\"headerlink\" title=\"不存在变量提升\"></a>不存在变量提升</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.log(a);  // undefined</div><div class=\"line\">console.log(b); //  ReferenceError</div><div class=\"line\">var a = 1;</div><div class=\"line\">let b = 2;</div></pre></td></tr></table></figure>\n<p>上面代码中，变量 <code>a</code> 用 <code>var</code> 声明，会发生变量提升，即在脚本开始运行时，变量 <code>a</code>就已经存在了，但是没有值，所以输出<code>undefined</code> 。 变量 <code>b</code> 用 <code>let</code> 声明，不存在变量提升，这表明在变量声明之前，变量 <code>b</code> 是不存在的，如果这时调用到变量<code>b</code>，则会抛出错误。</p>\n<h5 id=\"暂时性死区\"><a href=\"#暂时性死区\" class=\"headerlink\" title=\"暂时性死区\"></a>暂时性死区</h5><p>只要块级作用域内存在 <code>let</code> 命令，它所声明的变量就“绑定”这个区域，不再受外部的影响。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</div><div class=\"line\">  a = <span class=\"number\">2</span>;  <span class=\"comment\">// ReferenceError</span></div><div class=\"line\">  <span class=\"keyword\">let</span> a;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面代码中，存在全局变量 <code>a</code> ，但是块级作用域内 <code>let</code> 又声明了一个局部变量 <code>a</code> ，导致后者绑定这个块级作用域，所以在 <code>let</code> 声明变量前，对 <code>a</code> 赋值会报错。<br>ES6明确规定，如果区域中存在 <code>let</code> 和 <code>const</code> 命令，这个区域对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。<br>在代码块内，使用   <code>let</code> 命令声明变量之前，该变量都是不可用的。在语法上，称为“暂时性死区（temporal dead zone，简称TDZ）”。</p>\n<hr>\n<p>ES6规定暂时性死区和不存在变量提升，主要是为了减少运行时错误，防止在变量声明前就使用这个变量，从而导致意料之外的行为。这样的错误在ES5中很常见，现在有了这种规定，避免此类错误就很容易了。</p>\n<hr>\n<h4 id=\"不允许重复声明\"><a href=\"#不允许重复声明\" class=\"headerlink\" title=\"不允许重复声明\"></a>不允许重复声明</h4><p><code>let</code> 不允许在同一作用域内，重复声明同一个变量<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//报错</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//报错</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">2</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></div><div class=\"line\">因此，不能在函数内部重新声明参数</div><div class=\"line\">`<span class=\"string\">``</span> javascript</div><div class=\"line\"><span class=\"comment\">//报错</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">arg</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> arg;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//不会报错</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">arg</span>)</span>&#123;</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> arg;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-const-命令\"><a href=\"#2-const-命令\" class=\"headerlink\" title=\"2. const 命令\"></a>2. const 命令</h3><p><code>const</code> 声明的是常量，一旦声明，常量的值就不可改变<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> PI = <span class=\"number\">3.14</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(PI);  <span class=\"comment\">// 3.14</span></div><div class=\"line\"></div><div class=\"line\">PI=<span class=\"number\">3</span>;  <span class=\"comment\">//赋值无效，常规模式下不会报错</span></div></pre></td></tr></table></figure></p>\n<p><code>const</code> 声明的变量不得改变值，这意味着，一旦声明变量，就需要立刻给变量赋值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span></div><div class=\"line\"><span class=\"keyword\">const</span> a;   <span class=\"comment\">// SyntaxError: missing = in const declaration</span></div></pre></td></tr></table></figure></p>\n<p><code>const</code> 声明的变量，在严格模式下，会报错，在常规模式下虽然不会报错，但之后也无法重新赋值。</p>\n<hr>\n<hr>\n<h3 id=\"3-块级作用域\"><a href=\"#3-块级作用域\" class=\"headerlink\" title=\"3. 块级作用域\"></a>3. 块级作用域</h3><hr>\n<hr>"},{"title":"es6学习（二）","date":"2016-03-09T10:10:04.000Z","_content":"","source":"_posts/es6-learn-2.md","raw":"---\ntitle: \"es6学习（二）\"\ntags: 'es6'\ndate: 2016-03-09 18:10:04\n---\n","slug":"es6-learn-2","published":1,"updated":"2016-03-09T10:10:42.091Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2vzfnya0001hkte82umvn15","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-05-18T16:04:23.679Z","updated":"2017-05-18T16:04:23.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2vzfnyi0003hkte4yjw4sk1","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj2vzfny40000hkte5mhhbrlw","tag_id":"cj2vzfnye0002hkte3dh17d7r","_id":"cj2vzfnyl0006hkteh6922jpx"},{"post_id":"cj2vzfny40000hkte5mhhbrlw","tag_id":"cj2vzfnyk0004hktex5f36tjt","_id":"cj2vzfnyl0007hktexvzhi7xi"},{"post_id":"cj2vzfnya0001hkte82umvn15","tag_id":"cj2vzfnyk0004hktex5f36tjt","_id":"cj2vzfnym0008hkte1cco5x4i"}],"Tag":[{"name":"笔记","_id":"cj2vzfnye0002hkte3dh17d7r"},{"name":"es6","_id":"cj2vzfnyk0004hktex5f36tjt"}]}}